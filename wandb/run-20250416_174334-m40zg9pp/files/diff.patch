diff --git a/algorithm/sac_rrd_iq.py b/algorithm/sac_rrd_iq.py
index 8dc9dcd..53f37b3 100644
--- a/algorithm/sac_rrd_iq.py
+++ b/algorithm/sac_rrd_iq.py
@@ -380,21 +380,14 @@ poetry run pip install "stable_baselines3==2.0.0a1"
                 # qf1_loss = F.mse_loss(torch.mean(mb_eps_rewards), torch.mean(pre_re_1)) - r_var1 - a_var1
                 # qf2_loss = F.mse_loss(torch.mean(mb_eps_rewards), torch.mean(pre_re_2)) - r_var2 - a_var2
 
-                qf1_loss = F.mse_loss(torch.mean(mb_eps_rewards), torch.mean(pre_re_1)) + args.var_coefficient * r_var1 + args.q_coefficient * torch.mean(0.5*pre_re_1**2-pre_re_1)
-                qf2_loss = F.mse_loss(torch.mean(mb_eps_rewards), torch.mean(pre_re_2)) + args.var_coefficient * r_var2 + args.q_coefficient * torch.mean(0.5*pre_re_2**2-pre_re_2)
+                qf1_loss = F.mse_loss(torch.mean(mb_eps_rewards), torch.mean(pre_re_1)) + 0.5 * torch.square(pre_re_1 - torch.mean(mb_eps_rewards)).mean() + args.var_coefficient * r_var1 + args.q_coefficient * torch.mean( 1/(2* torch.mean(mb_eps_rewards))  * pre_re_1**2-pre_re_1) - 2 * (pre_re_1 * ( pre_re_1 - torch.mean(mb_eps_rewards))).mean()
+                qf2_loss = F.mse_loss(torch.mean(mb_eps_rewards), torch.mean(pre_re_2)) + 0.5 * torch.square(pre_re_2 - torch.mean(mb_eps_rewards)).mean() + args.var_coefficient * r_var2 + args.q_coefficient * torch.mean( 1/(2 * torch.mean(mb_eps_rewards)) * pre_re_2**2-pre_re_2) - 2 * (pre_re_2 * ( pre_re_2 - torch.mean(mb_eps_rewards))).mean()
 
 
                 
                 q1_loss = F.mse_loss(pre_re_1, mb_rewards.flatten())
                 q2_loss = F.mse_loss(pre_re_2, mb_rewards.flatten())
 
-                # qf1_loss = F.mse_loss(torch.mean(qf1_a_values), torch.mean(next_q_value))
-                # qf2_loss = F.mse_loss(torch.mean(qf2_a_values), torch.mean(next_q_value))
-
-                
-                # qf1_loss = F.mse_loss(torch.mean(qf1_a_values), torch.mean(next_q_value)) + 2* a_var1 +0.5 * torch.mean(pre_re_1**2)
-                # qf2_loss = F.mse_loss(torch.mean(qf2_a_values), torch.mean(next_q_value)) + 2* a_var2 + 0.5  * torch.mean(pre_re_2**2)
-
 
                 qf_loss += qf1_loss + qf2_loss
                 q_loss += q1_loss + q2_loss
